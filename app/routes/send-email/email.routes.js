const express = require("express");
const axios = require("axios");
const router = express.Router();
const emailQueue = require("../../configs/redis");
const Email = require("../../models/send-email/email.models");

// ‚úÖ Route hi·ªÉn th·ªã trang "Thanks"
router.get("/thanks", (req, res) => {
  res.render("thanks/index");
});

// ‚úÖ API g·ª≠i email (th√™m v√†o queue)
router.post("/send-email", async (req, res) => {
  try {
    const { to, subject, name, path } = req.body;
  
    if (!subject || !name || !path) {
      return res.status(400).json({ error: "Missing email parameters" });
    }
  
    let emailRecords = [];
  
    for (const recipient of Array.isArray(to) ? to : [to]) { // ƒê·∫£m b·∫£o 'to' l√† m·ªôt m·∫£ng
      const newEmail = new Email({
        to: recipient,
        subject,
        templateData: { name, path },
        status: "pending",
        isOpen: false, // M·∫∑c ƒë·ªãnh ch∆∞a m·ªü email
      });
  
      const savedEmail = await newEmail.save();
      emailRecords.push(savedEmail);
  
      // ‚úÖ Th√™m tracking pixel v√†o templateData
      const trackingUrl = `http://14.225.204.233:4000/api/email/track-email/${savedEmail._id}`;
      const updatedTemplateData = { 
        name, // ƒê·∫£m b·∫£o c√≥ name
        path, // ƒê·∫£m b·∫£o c√≥ path
        ...(savedEmail.templateData || {}), 
        trackingUrl 
      };
      
      console.log("üì¨ Data pushed to queue:", JSON.stringify(updatedTemplateData, null, 2));
  
      // ‚úÖ Th√™m v√†o h√†ng ƒë·ª£i g·ª≠i email
      await emailQueue.add({
        emailId: savedEmail._id,
        to: recipient,
        subject,
        templateData: updatedTemplateData,
      });
    }
  
    res.json({
      message: "Emails are being processed!",
      emails: emailRecords.map((email) => ({ emailId: email._id, to: email.to })),
    });
  } catch (error) {
    console.error("‚ùå Error queueing emails:", error);
    res.status(500).json({ error: "Internal server error", details: error.message });
  }  
});

// ‚úÖ API theo d√µi tr·∫°ng th√°i m·ªü email + tracking IP + v·ªã tr√≠ ƒë·ªãa l√Ω
router.get("/track-email/:emailId", async (req, res) => {
  try {
    const { emailId } = req.params;

    // L·∫•y ƒë·ªãa ch·ªâ IP c·ªßa ng∆∞·ªùi m·ªü email
    let userIp = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
    if (userIp.includes("::ffff:")) {
      userIp = userIp.replace("::ffff:", ""); // Chuy·ªÉn IPv6-mapped IPv4 v·ªÅ IPv4
    }

    const email = await Email.findById(emailId);
    if (!email) {
      return res.status(404).send("Email not found");
    }

    // üìå G·ªçi API l·∫•y v·ªã tr√≠ t·ª´ IP
    let locationData = {};
    try {
      const geoRes = await axios.get(`http://ip-api.com/json/${userIp}`);
      if (geoRes.data.status === "success") {
        locationData = {
          country: geoRes.data.country,
          city: geoRes.data.city,
          lat: geoRes.data.lat,
          lon: geoRes.data.lon,
        };
      }
    } catch (geoError) {
      console.error("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c v·ªã tr√≠ IP:", geoError.message);
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ m·ªü email + l∆∞u IP & v·ªã tr√≠ ƒë·ªãa l√Ω
    email.isOpen = true;
    email.openedAt = new Date();
    email.openedIp = userIp;
    email.location = locationData;
    await email.save();

    console.log(`üì© Email ${emailId} opened from IP: ${userIp}, Location: ${JSON.stringify(locationData)}`);

    // Tr·∫£ v·ªÅ ·∫£nh tracking pixel 1x1
    const pixel = Buffer.from(
      "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP88xAAAIMAIHSZADYAAAAASUVORK5CYII=",
      "base64"
    );
    res.writeHead(200, { "Content-Type": "image/png" });
    res.end(pixel);
  } catch (error) {
    console.error("‚ùå Error tracking email:", error);
    res.status(500).send("Internal server error");
  }
});

// ‚úÖ API ki·ªÉm tra tr·∫°ng th√°i email
router.get("/emails", async (req, res) => {
  try {
    const emails = await Email.find().sort({ createdAt: -1 });
    res.json(emails);
  } catch (error) {
    console.error("‚ùå Error fetching emails:", error);
    res.status(500).json({ error: "Internal server error", details: error.message });
  }
});

module.exports = router;
